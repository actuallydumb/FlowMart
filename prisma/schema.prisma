// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres.onehhjginfliphrulxmt:haresh@2003@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  password      String?
  emailVerified DateTime?
  image         String?
  roles         UserRole[]   @default([BUYER])
  bio           String?

  // Onboarding fields
  onboardingCompleted Boolean @default(false)
  onboardingStep      Int     @default(1)
  interests           String[] // For buyers - selected workflow categories
  integrations        String[] // For buyers - connected integrations
  
  // Seller-specific fields
  profession          String?
  experienceYears     Int?
  verificationDocs    String[] // Array of document URLs
  isSellerVerified    Boolean  @default(false)
  sellerVerificationStatus SellerStatus @default(PENDING)
  
  // Payment details for sellers
  bankAccountName     String?
  bankAccountNumber   String?
  bankRoutingNumber   String?
  paypalEmail         String?
  stripeAccountId     String?

  website       String?
  organizationId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  accounts      Account[]
  sessions      Session[]
  workflows     Workflow[]
  purchases     Purchase[]
  earnings      Earnings[]
  adminReviews  AdminReview[]
  workflowReviews WorkflowReview[]
  organization  Organization? @relation(fields: [organizationId], references: [id])
  workflowLogs  WorkflowLog[]
  workflowVersions WorkflowVersion[]
  workflowExecutions WorkflowExecution[]
  sellerVerifications SellerVerification[]
  sellerReviews SellerVerification[] @relation("SellerReviewer")
  blogPosts BlogPost[]
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  workflows   Workflow[]
  rateLimits  RateLimit[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workflow {
  id           String          @id @default(cuid())
  name         String
  description  String
  price        Float
  fileUrl      String
  previewUrl   String?
  prerequisites String?        // Required setup before using the workflow
  documentation String?        // Detailed instructions on using the workflow
  mediaUrls    String[]        // Array of image URLs for screenshots
  videoUrl     String?         // Video URL for demo/tutorial
  tags         Tag[]
  status       WorkflowStatus  @default(PENDING)
  downloads    Int             @default(0)
  isPublic     Boolean         @default(false)
  isFeatured   Boolean         @default(false)
  version      Int             @default(1)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String?
  organization Organization?   @relation(fields: [organizationId], references: [id])
  
  purchases    Purchase[]
  adminReviews AdminReview[]
  reviews      WorkflowReview[]
  versions     WorkflowVersion[]
  logs         WorkflowLog[]
  executions   WorkflowExecution[]
}

model WorkflowVersion {
  id          String   @id @default(cuid())
  version     Int
  name        String
  description String
  fileUrl     String
  changelog   String?
  createdAt   DateTime @default(now())
  
  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  createdById String
  createdBy   User    @relation(fields: [createdById], references: [id], onDelete: Cascade)
}

model WorkflowExecution {
  id          String   @id @default(cuid())
  status      ExecutionStatus @default(PENDING)
  startedAt   DateTime @default(now())
  completedAt DateTime?
  error       String?
  result      Json?
  
  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  executedById String
  executedBy   User    @relation(fields: [executedById], references: [id], onDelete: Cascade)
}

model WorkflowLog {
  id          String   @id @default(cuid())
  level       LogLevel @default(INFO)
  message     String
  metadata    Json?
  timestamp   DateTime @default(now())
  
  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  
  workflows Workflow[]
}

model Purchase {
  id         String         @id @default(cuid())
  amount     Float
  status     PurchaseStatus @default(PENDING)
  createdAt  DateTime       @default(now())
  
  workflowId String
  workflow   Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  buyerId    String
  buyer      User           @relation(fields: [buyerId], references: [id], onDelete: Cascade)

  // Back relation to Earnings (1-to-1)
  earnings   Earnings?
}

model Earnings {
  id          String         @id @default(cuid())
  amount      Float
  status      EarningsStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  
  developerId String
  developer   User           @relation(fields: [developerId], references: [id], onDelete: Cascade)
  
  purchaseId  String         @unique
  purchase    Purchase       @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
}

model AdminReview {
  id         String        @id @default(cuid())
  status     ReviewStatus
  comment    String?
  createdAt  DateTime      @default(now())
  
  workflowId String
  workflow   Workflow      @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  adminId    String
  admin      User          @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model WorkflowReview {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 stars
  reviewText  String?  // Optional review text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([workflowId, userId]) // One review per user per workflow
}

model RateLimit {
  id             String   @id @default(cuid())
  organizationId String
  endpoint       String
  limit          Int
  window         Int      // in seconds
  current        Int      @default(0)
  resetAt        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, endpoint])
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String
  content   String   @db.Text
  image     String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String
  content   String   @db.Text
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  tags      String[]
  category  String
  featured  Boolean  @default(false)
  published Boolean  @default(false)
  image     String?
  readTime  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  status    String   @default("PENDING") // PENDING, RESPONDED, CLOSED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  role      String
  company   String
  quote     String   @db.Text
  avatar    String
  rating    Int      @default(5)
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SellerVerification {
  id        String   @id @default(cuid())
  userId    String   @unique
  status    SellerStatus @default(PENDING)
  submittedAt DateTime @default(now())
  reviewedAt DateTime?
  reviewedBy String?
  notes     String?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer  User?    @relation("SellerReviewer", fields: [reviewedBy], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plugin {
  id          String   @id @default(cuid())
  name        String
  description String
  version     String
  author      String
  fileUrl     String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  ADMIN
  DEVELOPER
  BUYER
}

enum WorkflowStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum EarningsStatus {
  PENDING
  PAID
  FAILED
}

enum ReviewStatus {
  APPROVED
  REJECTED
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  DEBUG
}

enum SellerStatus {
  PENDING
  APPROVED
  REJECTED
}
